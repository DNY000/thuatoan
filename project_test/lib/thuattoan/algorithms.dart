import 'dart:math';

class Algorithms {
  // Level 1
  static int sum(int a, int b) => a + b;

  static int lengthString(String str) => str.length;

  static double numberSquare(int n) => double.parse(sqrt(n).toStringAsFixed(5));

  static int maxNumber(List<int> a) => a.reduce(max);

  static String shortString(List<String> str) =>
      str.reduce((a, b) => a.length < b.length ? a : b);

  static List<String> sortList(List<String> str) {
    str.sort((a, b) => a.compareTo(b));
    return str;
  }

  // sap xep number  tƒÉng d·∫ßn
  static List<int> sortListNumber(List<int> a) {
    a.sort();
    return a;
  }

  static double medianOfTheNumber(List<int> n) {
    n.sort();
    int mid = n.length ~/ 2;
    return n.length % 2 == 0 ? (n[mid - 1] + n[mid]) / 2.0 : n[mid].toDouble();
  }

  static int lengthStr(String s) => s.trim().split(RegExp(r'\s+')).length;

  static List<String> containCharacter(List<String> str) =>
      str.where((s) => s.contains('a')).toList();

  // Level 2
  static int max2(List<int> n) {
    int max1 = 0;
    int max2 = 0;
    for (int a in n) {
      if (a > max1) {
        max2 = max1;
        max1 = a;
      } else if (a > max2 && a != max1) {
        max2 = a;
      }
    }
    return max2;
  }

  static String maxString(List<String> s) =>
      s.reduce((a, b) => a.length > b.length ? a : b);

  static String longestCommonSubstring(String s1, String s2) {
    int m = s1.length, n = s2.length;
    List<List<int>> dp = List.generate(m + 1, (_) => List.filled(n + 1, 0));
    int maxLength = 0;
    int endIndex = 0;

    for (int i = 1; i <= m; i++) {
      for (int j = 1; j <= n; j++) {
        if (s1[i - 1] == s2[j - 1]) {
          dp[i][j] = dp[i - 1][j - 1] + 1;
          if (dp[i][j] > maxLength) {
            maxLength = dp[i][j];
            endIndex = i;
          }
        }
      }
    }

    return s1.substring(endIndex - maxLength, endIndex);
  }

  static int sumDivisible(List<int> arr) =>
      arr.where((e) => e % 3 == 0 || e % 5 == 0).reduce((a, b) => a + b);

  static int maxSubArraySum(List<int> a) {
    int maxC = a[0], maxG = a[0];
    for (int i = 1; i < a.length; i++) {
      maxC = max(a[i], maxC + a[i]);
      maxG = max(maxG, maxC);
    }
    return maxG;
  }

  // Level 3

  // Level 4
  //4.1
/*Write a program that takes a list of integers as input and returns
 the minimum number of moves required to sort the list in ascending
  order using bubble sort.
		ƒê·∫ßu v√†o 1 d√£y s·ªë b·∫•t k·ª≥
ƒê·∫ßu ra l√† s·ªë l·∫ßn l·∫∑p ƒë·ªÉ ho√†n th√†nh vi·ªác s·∫Øp x·∫øp n·ªïi b·ªçt
G·ª£i √Ω: T√¨m hi·ªÉu v·ªÅ s·∫Øp x·∫øp n·ªïi b·ªçt ( bubble sort ). T√¨m s·ªë l·∫ßn s·∫Øp x·∫øp n·ªïi b·ªçt c·∫ßn ƒë·ªÉ ho√†n th√†nh vi·ªác s·∫Øp x·∫øp v·ªõi m·∫£ng ƒë·∫ßu v√†o 
VD: [3, 1, 4, 2, 6, 5] c·∫ßn 4 l·∫ßn s·∫Øp x·∫øp ƒë·ªÉ ho√†n th√†nh
 */
  static int bubbleSortMoves(List<int> arr) {
    int count = 0;
    int n = arr.length;
    for (int i = 0; i < n - 1; i++) {
      for (int j = 0; j < n - i - 1; j++) {
        if (arr[j] > arr[j + 1]) {
          int temp = arr[j];
          arr[j] = arr[j + 1];
          arr[j + 1] = temp;
          count++;
        }
      }
    }
    return count;
  }

//4.2
/*Write a program that takes a list of integers as input and returns
  the number of distinct subsequences of the list that sum up to a 
  target value.
VD: 
ƒê·∫ßu v√†o [1, 2, 3, 4, 5] v√† 5 üëâ 2 ( v√¨ 2 + 3 v√† 1 + 4 b·∫±ng 5 )
ƒê·∫ßu v√†o [1, 1, 2, 3, 4] v√† 5 üëâ 4 ( v√¨ 4 t·ªï h·ª£p c√≥ t·ªïng b·∫±ng 5 )
 */
  static int countSubsequencesDP(List<int> arr, int target) {
    List<int> dp = List.filled(target + 1, 0);
    dp[0] = 1;
    arr.sort();
    for (int num in arr) {
      for (int j = target; j >= num; j--) {
        dp[j] += dp[j - num];
      }
    }

    return dp[target];
  }

//4.3
/*Write a program that takes a list of strings as input and returns
 the length of the longest substring that appears in every 
 string in the list.VD: 
["abcdefg", "abcde", "abcdef", "ab", "abc"] => 2
["programming", "programmer", "program"] => 7
 */
  static longestCommonSubstring2(List<String> strings) {
    if (strings.isEmpty) return 0;
    String first = strings[0];
    int maxLength = 0;

    for (int i = 0; i < first.length; i++) {
      for (int j = i + 1; j <= first.length; j++) {
        String substring = first.substring(i, j);
        bool foundInAll = true;
        for (String str in strings) {
          if (!str.contains(substring)) {
            foundInAll = false;
            break;
          }
        }
        if (foundInAll) {
          maxLength = max(maxLength, substring.length);
        }
      }
    }

    return maxLength;
  }
  //4.4

  static int maxSumSubarrayNoConsecutive(List<int> nums) {
    if (nums.isEmpty) {
      return 0;
    }

    // If there's only one element, return it.
    if (nums.length == 1) {
      return nums[0];
    }

    // dp array to store the maximum sum at each index
    List<int> dp = List.filled(nums.length, 0);

    // Base case: the first element in the dp array is the first element in the input array
    dp[0] = nums[0];

    // Second element: It's either the first element or the second element itself
    dp[1] = nums[1] > nums[0] ? nums[1] : dp[0];

    // Fill the dp array by iterating through the list
    for (int i = 2; i < nums.length; i++) {
      // Option 1: Don't include nums[i-1] (skip it)
      // Option 2: Include nums[i], skip nums[i-1], and add it to dp[i-2]
      dp[i] = nums[i] + (nums[i - 1] != nums[i] - 1 ? dp[i - 2] : 0);

      // Option 3: Max of excluding the current number, or including it
      dp[i] = nums[i] > dp[i - 1] ? dp[i] : dp[i - 1];
    }

    // The maximum sum will be the last element in dp
    return dp[nums.length - 1];
  }

//4.5

/* Write a program that takes a list of strings as input and returns the 
length of the longest common substring of the strings. ( m·ªü r·ªông c·ªßa 2.3 =>
 c√≥ th·ªÉ b·ªè qua )
*/

  static longestCommonSubstring1(List<String> strings) {
    if (strings.isEmpty) return 0;

    String first = strings[0];
    int maxLength = 0;
    for (int i = 0; i < first.length; i++) {
      for (int j = i + 1; j <= first.length; j++) {
        String substring = first.substring(i, j);

        // Ki·ªÉm tra chu·ªói con n√†y c√≥ trong t·∫•t c·∫£ c√°c chu·ªói c√≤n l·∫°i kh√¥ng
        bool foundInAll = true;
        for (String str in strings) {
          if (!str.contains(substring)) {
            foundInAll = false;
            break;
          }
        }
        if (foundInAll) {
          maxLength = max(maxLength, substring.length);
        }
      }
    }

    return maxLength;
  }

//4.6
/* Write a program that takes a list of integers as input and returns the 
maximum product of any three distinct elements in the list.
*/
  static int maxProductOfThree(List<int> arr) {
    if (arr.length < 3) return 0;
    arr.sort();
    int n = arr.length;
    return arr[n - 1] * arr[n - 2] * arr[n - 3];
  }

//4.7
/*Write a program that takes a list of strings as input and returns the list 
sorted by the number of distinct words in each string, with the longest
 strings appearing first.
(Khuy·∫øn kh√≠ch d√πng forEach v·ªõi javascript )
S·∫Øp x·∫øp t·ª´ chu·ªói d√†i nh·∫•t ƒë·∫øn ng·∫Øn nh·∫•t, trong tr∆∞·ªùng h·ª£p c√≥ 2 chu·ªói c√πng ƒë·ªô 
d√†i th√¨ s·∫Øp x·∫øp theo th·ª© t·ª± b·∫£ng ch·ªØ c√°i 
V√≠ d·ª•: ['the quick brown fox', 'the lazy dog jumps over the fence',
 'the cat in the hat']
K·∫øt qu·∫£: ['the lazy dog jumps over the fence', 'the quick brown fox',
 'the cat in the hat']
 */
  static List<String> sortByDistinctWords(List<String> strings) {
    strings.sort((a, b) {
      if (a.length == b.length) {
        return a.length.compareTo(b.length);
      }
      return a.compareTo(b);
    });
    return strings;
  }

// 4.8
/*Write a program that takes a list of integers as input and returns the 
smallest positive integer that cannot be represented as the sum of any subset
 of the list, with the additional constraint that no subset can contain any
  consecutive integers. ( c√≥ th·ªÉ b·ªè qua ) */
//smallestPositiveIntegerNoConsecutive

  static int smallestPositiveIntegerNoConsecutive(List<int> nums) {
    final Set<int> resultSums = {}; // Set l∆∞u t·∫•t c·∫£ c√°c t·ªïng h·ª£p l·ªá
    nums = nums.where((e) => e > 0).toList(); // L·ªçc c√°c s·ªë d∆∞∆°ng
    nums.sort(); // S·∫Øp x·∫øp m·∫£ng

    // H√†m ƒë·ªá quy sinh t·∫•t c·∫£ c√°c t·∫≠p con kh√¥ng c√≥ s·ªë li√™n ti·∫øp
    void generateSubset(int index, List<int> subset) {
      if (index == nums.length) {
        if (subset.isNotEmpty) {
          final sorted = List<int>.from(subset)
            ..sort(); // Clone v√† sort l·∫°i subset
          bool hasConsecutive = false;
          // Ki·ªÉm tra xem c√≥ s·ªë li√™n ti·∫øp trong subset kh√¥ng
          for (int i = 1; i < sorted.length; i++) {
            if (sorted[i] == sorted[i - 1] + 1) {
              hasConsecutive = true;
              break;
            }
          }
          if (!hasConsecutive) {
            resultSums.add(sorted.reduce((a, b) =>
                a + b)); // Th√™m t·ªïng v√†o Set n·∫øu kh√¥ng c√≥ s·ªë li√™n ti·∫øp
          }
        }
        return;
      }

      // Kh√¥ng ch·ªçn ph·∫ßn t·ª≠ t·∫°i index
      generateSubset(index + 1, List<int>.from(subset));

      // Ch·ªçn ph·∫ßn t·ª≠ t·∫°i index v√† th√™m v√†o subset
      final newSubset = List<int>.from(subset)..add(nums[index]);
      generateSubset(index + 1, newSubset);
    }

    // Kh·ªüi ƒë·ªông qu√° tr√¨nh sinh t·∫•t c·∫£ c√°c subset
    generateSubset(0, []);

    // T√¨m s·ªë d∆∞∆°ng nh·ªè nh·∫•t kh√¥ng c√≥ trong resultSums
    int smallest = 1;
    while (resultSums.contains(smallest)) {
      smallest++;
    }

    return smallest;
  }

//4.9
/*Write a program that takes a list of integers as input and returns the length
  of the longest increasing subsequence of the numbers, with the additional
   constraint that no two adjacent elements in the subsequence can differ by
    more than 1. ( Khuy·∫øn kh√≠ch d√πng reduce ) */
  static int longestIncreasingSubsequence1(List<int> arr) {
    if (arr.isEmpty) return 0;
    int maxLength = 1;
    int currentLength = 1;

    arr.reduce((a, b) {
      if ((a - b).abs() == 1) {
        currentLength++;
        maxLength = max(maxLength, currentLength);
      } else {
        currentLength = 1;
      }
      return b; // tr·∫£ v·ªÅ gi√° tr·ªã b ƒë·ªÉ ti·∫øp t·ª•c v√≤ng l·∫∑p v√≠ d·ª•  1 ,2
      //tr·∫£ a ƒë·ªÉ ti·∫øp t·ª•c v√≤ng l·∫∑p v·ªõi a m·ªõi b·∫±ng 2
    });

    return maxLength;
  }

/*Write a program that takes a list of strings as input and returns the two
 strings with the largest overlap of substrings, where the substrings 
 must be at lea	st k characters long (where k is a parameter to the function).
		Gi·ªëng b√†i 2.3 nh∆∞ng th√™m bi·∫øn k l√† ƒë·ªô d√†i c√°c k√Ω t·ª± tr√πng
 */
  static List<String> largestOverlapWithK(List<String> strings, int k) {
    int maxOverlap = 0;
    String resultStr1 = '', resultStr2 = '';

    // H√†m t√≠nh s·ªë l∆∞·ª£ng chu·ªói con tr√πng nhau gi·ªØa hai chu·ªói
    int maxOverlap0(String s1, String s2, int k) {
      int overlap = 0;
      for (int i = 0; i <= s1.length - k; i++) {
        String substring1 = s1.substring(i, i + k);
        for (int j = 0; j <= s2.length - k; j++) {
          String substring2 = s2.substring(j, j + k);
          if (substring1 == substring2) {
            overlap++;
          }
        }
      }
      return overlap;
    }

    // Duy·ªát qua t·∫•t c·∫£ c√°c c·∫∑p chu·ªói trong danh s√°ch
    for (int i = 0; i < strings.length; i++) {
      for (int j = i + 1; j < strings.length; j++) {
        int overlap = maxOverlap0(strings[i], strings[j], k);
        if (overlap > maxOverlap) {
          maxOverlap = overlap;
          resultStr1 = strings[i];
          resultStr2 = strings[j];
        }
      }
    }

    return [resultStr1, resultStr2];
  }

  // Level 5
  //5.1
/*reverses: Cho ƒë·∫ßu v√†o l√† 1 m·∫£ng, Vi·∫øt m·ªôt function ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c th·ª© t·ª± ph·∫ßn 
t·ª≠ trong m·∫£ng , y√™u c·∫ßu kh√¥ng d√πng h√†m Reverses c√≥ s·∫µn c·ªßa javascript 
( d√πng forEach ho·∫∑c reduce ) */

  static List<int> reverses(List<int> arr) {
    if (arr.isEmpty) return [];
    List<int> result = [];

    for (var element in arr) {
      result.insert(0, element); // ch√®n l·∫ßn l∆∞·ª£t t·ª´ng ph·∫ßn t·ª≠ v√†o ƒë·∫ßu danh s√°ch
    }
    return result;
  }

/*chunk: Cho m·ªôt m·∫£ng ƒë·∫ßu v√†o, vi·∫øt m·ªôt function ƒë·ªÉ chia ƒë·ªÅu m·∫£ng theo 
s·ªë ph·∫ßn ch·ªâ ƒë·ªãnh. 
V√≠ d·ª•: ['a', 'b', 'c', 'd']
chunk(['a', 'b', 'c', 'd'], 2); üëâ [['a', 'b'], ['c', 'd']]
chunk(['a', 'b', 'c', 'd'], 3); üëâ [['a', 'b', 'c'], ['d']]
 */
  static List<List<T>> chunk<T>(List<T> arr, int size) {
    // if (arr.isEmpty) return;
    List<List<T>> result = [];

    for (int i = 0; i < arr.length; i += size) {
      result.add(arr.sublist(i, i + size > arr.length ? arr.length : i + size));
    }
    return result;
  }

//5.3
/* uniq: Cho m·ªôt m·∫£ng ƒë·∫ßu v√†o, vi·∫øt m·ªôt function ƒë·ªÉ lo·∫°i b·ªè c√°c ph·∫ßn t·ª≠ b·ªã
 l·∫∑p trong m·∫£ng. 
V√≠ d·ª• [1, 2, 3, 2, 4] üëâ [1, 2, 3, 4]
*/
  static List<int> uniq(List<int> arr) {
    if (arr.isEmpty) return [];
    List<int> result = [];
    for (var element in arr) {
      if (!result.contains(element)) {
        result.add(element);
      }
    }
    return result;
  }

//5.4
/*uniq ArrayObject: Gi·ªëng Uniq nh∆∞ng m·ªü r·ªông cho 1 collection
 V√≠ d·ª•:
[{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'y': 2, 'x': 1 }] 
üëâ [{ ‚Äòx': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
 */
  static List<Map<String, String>> uniqArrayObject(
      List<Map<String, String>> arr) {
    if (arr.isEmpty) return [];
    List<Map<String, String>> result = [];

    for (var element in arr) {
      if (!result.any((e) => e.toString() == element.toString())) {
        result.add(element);
      }
    }
    return result;
  }

//5.5
/*Group by: Cho ƒë·∫ßu v√†o l√† 1 collection ( array of object ), 
  Vi·∫øt m·ªôt function ƒë·ªÉ tr·∫£ ra 1 OBJECT m·ªõi ch·ª©a d·ªØ li·ªáu ƒë∆∞·ª£c group theo
   tr∆∞·ªùng ch·ªâ ƒë·ªãnh. 
V√≠ d·ª• : 
const collect = [{a: 1, b: 2}, {a: 1, b: 3}, {a: 2, b: 2}];
groupBy(collect, ‚Äòa'); 
üëâ output {1: [{a: 1, b: 2}, {a: 1, b: 3}], 2: [{a: 2, b: 2}]}

groupBy(collect, ‚Äòb'); 
üëâ output {2: [{a: 1, b: 2}, {a: 2, b: 2}], 3: [{a: 1, b: 3}]}
 */
  static Map<String, List<Map<String, String>>> groupBy(
      List<Map<String, String>> collection, String field) {
    Map<String, List<Map<String, String>>> grouped = {};

    for (var item in collection) {
      // l·∫•y value
      var key = item[field];
      if (key != null) {
        if (!grouped.containsKey(key)) {
          // t·∫°o value l√† m·∫£ng tr·ªëng cho key
          grouped[key] = [];
        }
        grouped[key]!.add(item);
        // th√™m c√°c item v√† value
      }
    }

    return grouped;
  }

//5.6
/*TrimAll: Vi·∫øt function lo·∫°i b·ªè t·∫•t c·∫£ kho·∫£ng tr·∫Øng ƒë·∫ßu v√† cu·ªëi c·ªßa m·ªôt chu·ªói
 b·∫•t k·ª≥, n·∫øu c√≥ kho·∫£ng tr·∫Øng ·ªü gi·ªØa chu·ªói ƒë√≥ th√¨ ch·ªâ gi·ªØ l·∫°i m·ªôt kho·∫£ng tr·∫Øng. 
VD:
‚Äú    hello     world    ‚Äú üëâ ‚Äúhello world"  
‚Äú   I    am    good      ‚Äú üëâ ‚ÄúI am good‚Äù
 */

  static String trimALl(String str) {
    if (str.isEmpty) return str;
    return str
        .trim()
        .split(RegExp(r'\s+')) // bi·ªÉu th·ª©c ch√≠nh quy
        .join(' '); // Gh√©p l·∫°i c√°c t·ª´ v·ªõi m·ªôt kho·∫£ng tr·∫Øng duy nh·∫•t
  }

//5.7
/*MapKey: Cho 1 m·∫£ng c√°c key, v√†o 1 m·∫£ng c√°c object ,
 Vi·∫øt m·ªôt function ƒë·ªÉ tr·∫£ ra m·ªôt m·∫£ng c√°c object theo th·ª© t·ª± m·∫£ng c√°c key
 . ( Y√™u c·∫ßu d√πng h√†m map )
V√≠ d·ª•
keys = [‚Äòb', ‚Äòa', ‚Äòc']
collections = [{a: 1, b: 1, c: 2, d: 4, e: 5}, {a: 2, b:1, c: 5, d: 4, e: 5}, {d: 4, e: 5, a: 22, b:11, c: 51, }]
üëâ [{b: 1, a: 1, c: 2}, {b: 1, a: 2, c: 5}, {b: 11, a: 22, c: 51}]
 */
//
  static List<Map<String, String>> mapKey(
      List<String> keys, List<Map<String, String>> collections) {
    if (keys.isEmpty || collections.isEmpty) return [];
    List<Map<String, String>> result = [];

    for (var e in collections) {
      Map<String, String> newMap = {};
      for (var key in keys) {
        if (e.containsKey(key)) {
          // ki·ªÉm tra key c√≥ trong object kh√¥ng
          // n·∫øu c√≥ th√¨ th√™m v√†o m·∫£ng m·ªõi
          newMap[key] = e[key] as String;
        }
      }
      result.add(newMap);
    }

    return result;
  }

//5.8
/*Switch Order: Vi·∫øt function ƒë·ªÉ thay ƒë·ªïi th·ª© t·ª± order c·ªßa c√°c object. 
V√≠ d·ª•:
arr = [{id: 10, order: 0}, {id: 12, order: 1}, {id: 9, order: 2}, {id: 11, order: 3}]
switchOrder(9, 1)  // ( chuy·ªÉn object c√≥ id b·∫±ng 9 l√™n v·ªã tr√≠ order = 1, thay ƒë·ªïi l·∫°i gi√° tr·ªã c·ªßa order )
üëâ [{id: 10, order: 0}, {id: 9, order: 1}, {id: 12, order: 2}, {id: 11, order: 3}]
 */
  static List<Map<String, int>> switchOrder(
      List<Map<String, int>> arr, int id, int newOrder) {
    if (arr.isEmpty) return [];

    // T√¨m ƒë·ªëi t∆∞·ª£ng c√≥ id c·∫ßn thay ƒë·ªïi
    int currentIndex = arr.indexWhere((element) => element['id'] == id);
    if (currentIndex == -1) return []; // Kh√¥ng t√¨m th·∫•y ƒë·ªëi t∆∞·ª£ng

    // L·∫•y ƒë·ªëi t∆∞·ª£ng c·∫ßn thay ƒë·ªïi v√† c·∫≠p nh·∫≠t order
    Map<String, int> target = arr[currentIndex];
    target['order'] = newOrder;

    // C·∫≠p nh·∫≠t th·ª© t·ª± cho c√°c ƒë·ªëi t∆∞·ª£ng kh√°c
    for (var element in arr) {
      if (element['id'] != id) {
        if (element['order']! >= newOrder) {
          element['order'] =
              (element['order'] ?? 0) + 1; // ƒê·∫©y c√°c ƒë·ªëi t∆∞·ª£ng kh√°c xu·ªëng
        }
      }
    }

    // S·∫Øp x·∫øp l·∫°i danh s√°ch theo th·ª© t·ª± order
    arr.sort((a, b) => a['order']!.compareTo(b['order']!));

    return arr;
  }

  //5.9
  static Map<String, int> sumAll(List<Map<String, int>> arr) {
    final Map<String, int> result = {};

    for (final obj in arr) {
      obj.forEach((key, value) {
        int intValue = value;
        result[key] = (result[key] ?? 0) + intValue;
      });
    }

    return result;
  }

//3.1
  static int secondSmallestNumber(List<int> a) {
    a.sort();
    return a[1];
  }

// c√°ch 2
  static int secondSmallestNumber2(List<int> a) {
    List<int> b = a.toSet().toList();
    // lo·∫°i b·ªè c√°c ph·∫ßn t·ª≠ tr√πng
    b.remove(b.reduce((a, b) => a < b ? a : b));
    // x√≥a ph·∫ßn t·ª≠ nh·ªè nh·∫•t
    return b.reduce((a, b) => a < b ? a : b);
  }
//3.2
/*Write a program that takes a list of integers as input and 
returns the maximum difference between any two elements in the list.
		VD: [1, 2, 91, 9, 100] üëâ 99 ( ket qua cua 100 - 1 )
 */

  static int maxDifferenceBetween(List<int> a) {
    a.sort();
    return a[a.length - 1] - a[0];
  }

// max2
  static int max2So(List<int> a) {
    int max1 = a[0];

    for (int i = 0; i < a.length - 1; i++) {
      for (int j = i + 1; j < a.length; j++) {
        max1 = max(a[i] - a[j], max1);
      }
    }
    return max1;
  }

// c√°ch 3
  static int max2So2(List<int> a) {
    int max1 = a[0];
    int max2 = a[1];
    for (int i = 0; i < a.length; i++) {
      if (a[i] > max1) {
        // c·∫≠p nh·∫≠t l·∫°i max 1
        max2 = max1;
        max1 = a[i];
      } else if (a[i] > max2) {
        // c·∫≠p nh·∫≠t max 2
        max2 = a[i];
      }
    }
    return max2 + max1;
  }
//3.3
/*Write a program that takes a list of integers 
as input and returns the longest increasing subsequence of 
the numbers. ( T√¨m ƒë·ªô d√†i c·ªßa chu·ªói con t·ªãnh ti·∫øn d√†i nh·∫•t )

 */

  static int longestIncreasingSubsequence(List<int> nums) {
    if (nums.isEmpty) return 0;

    // T·∫°o m·ªôt danh s√°ch ƒë·ªô d√†i b·∫±ng nums c√≥ ph·∫ßn t·ª´ b·∫±ng 1
    List<int> lis = List.filled(nums.length, 1);
    for (int i = 1; i < nums.length; i++) {
      for (int j = 0; j < i; j++) {
        //   ki·ªÉm tra   ph·∫ßn t·ª≠ tr∆∞·ªõc j
        if (nums[i] > nums[j]) {
          //c·∫≠p nh·∫≠t lis
          lis[i] = lis[i] > lis[j] + 1 ? lis[i] : lis[j] + 1;
          // ƒë·∫£m b·∫£o lis[i] l·ªõn h∆°n ph·∫ßn t·ª≠ tr∆∞·ªõc n√≥
          //
        }
      }
    }
    return lis.reduce((a, b) => a > b ? a : b);
  }
//3.4
/*Write a program that takes a list of strings as input and returns 
the two strings with the largest overlap of characters. 
 */

  static List<String> largestOverlap(List<String> str) {
    List<String> result = [];
    int max = 0;

    // H√†m t√≠nh s·ªë k√Ω t·ª± chung gi·ªØa 2 chu·ªói
    int overlapCount(String s1, String s2) {
      Set<String> set1 = s1.split('').toSet();
      Set<String> set2 = s2.split('').toSet();
      return set1.intersection(set2).length;
      // l·∫•y ph·∫ßn giao c·ªßa 2 t·∫≠p h·ª£p
    }

    for (int i = 0; i < str.length; i++) {
      for (int j = i + 1; j < str.length; j++) {
        int overlap = overlapCount(str[i], str[j]);
        if (overlap > max) {
          max = overlap;
          result = [str[i], str[j]];
        }
      }
    }

    return result;
  }

//3.5
/*
Write a program that takes a list of numbers as input and returns 
the smallest positive integer that cannot be represented as the 
sum of any subset of the list.
V√≠ d·ª•: [1, 2, 3, 7, 8, 20] => 42
Gi·∫£i th√≠ch
Ch·∫°y v√≤ng l·∫∑p t·ª´ 1 ƒë·∫øn s·ªë d∆∞∆°ng v√¥ c√πng:
S·ªë 1 c√≥ trong m·∫£ng => lo·∫°i
‚Ä¶ T∆∞∆°ng t·ª± v·ªõi 2 v√†ng l·∫∑p t·ª´ 1 ƒë·∫øn s·ªë d∆∞∆°ng v√¥ c√πng:
S·ªë 1 c√≥ trong m·∫£ng => lo·∫°i
‚Ä¶ T∆∞∆°ng t·ª± v·ªõi 2 3
S·ªë 4 kh√¥ng c√≥ trong m·∫£ng n√≥ l√† t·ªïng c·ªßa 1 v√† 3 üëâ lo·∫°i 4
‚Ä¶ T∆∞∆°ng t·ª± ƒë·∫øn 42 th√¨ kh√¥ng c√≥ t·∫≠p h·ª£p s·ªë n√†o trong m·∫£ng l√† 42=> 42 l√† k·∫øt qu·∫£

*/
  static int smallestPositiveInteger(List<int> nums) {
    nums.sort();
    //s·∫Øp x·∫øp c√°c ph·∫ßn t·ª≠ trong m·∫£ng
    int smallest = 1;
    for (int num in nums) {
      if (num > smallest) {
        break;
      } else if (num <= smallest) {
        smallest += num;
      }
    }
    return smallest;
  }

//3.6
/*Write a program that takes two lists of integers as input and 
returns the median of the combined list.
M·ªü r·ªông c·ªßa b√†i 1.8 nh∆∞ng v·ªõi ƒë·∫ßu v√†o l√† 2 m·∫£ng thay v√¨ 1
 */
  static double findMedianSortedArrays(List<int> nums1, List<int> nums2) {
    List<int> merged = [...nums1, ...nums2];
    // ... tr√≠ch xu·∫•t c√°c ph·∫ßn t·ª≠ c·ªßa m·∫£ng
    merged.sort();
    int n = merged.length;
    if (n % 2 == 0) {
      return (merged[n ~/ 2 - 1] + merged[n ~/ 2]) / 2.0;
    } else {
      return merged[n ~/ 2].toDouble();
    }
  }

//3.7
  static int longestPalindromeLength(String str) {
    String cleanInput = str.replaceAll(' ', '').toLowerCase();
    // lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng
    Map<String, int> charCount = {};
    for (int i = 0; i < cleanInput.length; i++) {
      String char = cleanInput[i];
      charCount[char] = (charCount[char] ?? 0) + 1;
    }

    //  T√≠nh ƒë·ªô d√†i palindrome d√†i nh·∫•t
    int length = 0;
    bool hasOdd = false;
    charCount.forEach((char, count) {
      if (count % 2 == 0) {
        length += count;
      } else {
        length += count - 1;
        hasOdd = true;
      }
    });
    if (hasOdd) length += 1;
    return length;
  }

//3.8
/* Write a program that takes a list of numbers as input and 
returns the number of distinct pairs of numbers in the 
list that sum up to a target value.*/
// input list target = number
  static List<List<int>> countPairsWithSum(List<int> nums, int target) {
    // t·∫°o 2 list ch·ª©a
    List<int> seem = [];
    List<String> pairs = [];
    for (int num in nums) {
      int complement = target - num;
      if (seem.contains(complement)) {
        String pair = '${min(num, complement)}-${max(num, complement)}';
        pairs.add(pair);
      } else {
        seem.add(num);
      }
    }
    List<List<int>> result = pairs
        .map(
          (e) => e.split('-').map(int.parse).toList(),
        )
        .toList();
    return result;
  }

//3.10
/*Write a program that takes a list of strings as input and 
returns the list sorted by the number of distinct characters 
in each string, with the shortest strings appearing first.
 */

  static List<String> sortByDistinctChars(List<String> str) {
    str.sort(
      (a, b) {
        if (a.length != b.length) {
          return a.length.compareTo(b.length);
        }
        return a.compareTo(b);
      },
    );
    return str;
  }
}
